{"version":3,"sources":["CityItem.js","Input.js","CitySrc.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["CityItem","cityData","setCityUl","cityUl","name","sys","weather","main","coord","id","type","onClick","newList","filter","item","handleRemove","country","className","description","temp_min","temp_max","lat","lon","Input","changeUrl","useState","cityName","setCityName","onSubmit","e","preventDefault","process","placeholder","onChange","target","value","disabled","length","CitySrc","url","setUrl","isLoading","setLoading","status","message","hasError","setError","useEffect","a","fetch","response","ok","json","data","console","log","getCityWeather","map","cityItem","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.800fe91b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CityItem = ({ cityData, setCityUl, cityUl }) => {\r\n  const { name, sys, weather, main, coord } = cityData;\r\n  function handleRemove(id) {\r\n    const newList = cityUl.filter((item) => item.id !== id);\r\n    setCityUl(newList);\r\n  }\r\n  return (\r\n    <>\r\n      <button\r\n        id=\"close\"\r\n        type=\"button\"\r\n        onClick={() => handleRemove(cityData.id)}\r\n      >\r\n        X\r\n      </button>\r\n      <h2>\r\n        {name}, {sys.country}\r\n      </h2>\r\n      <div className=\"weather-desc\">\r\n        <h3>{weather[0].main}</h3>\r\n        <p>{weather[0].description}</p>\r\n        <p>min temp: {main.temp_min}</p>\r\n        <p>max temp: {main.temp_max}</p>\r\n        <p>\r\n          location: {coord.lat}, {coord.lon}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityItem;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Input({ changeUrl }) {\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        changeUrl(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`\r\n        );\r\n      }}\r\n    >\r\n      <input\r\n        placeholder=\"Enter a valid city name\"\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          setCityName(e.target.value);\r\n        }}\r\n      />\r\n      <input disabled={cityName.length < 1} value=\"Search City\" type=\"submit\" />\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CityItem from \"./CityItem\";\r\nimport Input from \"./Input\";\r\n\r\nexport default function CitySrc() {\r\n  const [cityUl, setCityUl] = useState([]);\r\n  const [url, setUrl] = useState();\r\n  const [cityData, setCityData] = useState();\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [hasError, setError] = useState({ status: false, message: \"\" });\r\n\r\n  const changeUrl = (url) => {\r\n    setUrl(url);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCityWeather = async () => {\r\n      if (url) {\r\n        setLoading(true);\r\n        try {\r\n          const response = await fetch(url);\r\n          if (!response.ok) {\r\n            setError(true, \"response ok!\");\r\n          } else {\r\n            setError({ status: false, message: \"\" });\r\n            const data = await response.json();\r\n            console.log(data);\r\n            setCityUl([data, ...cityUl]);\r\n            console.log(cityUl);\r\n\r\n            setLoading(false);\r\n          }\r\n        } catch (error) {\r\n          setError({ status: true, message: error.message });\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n    getCityWeather();\r\n  }, [url]);\r\n  return (\r\n    <div className=\"src-container\">\r\n      <Input changeUrl={changeUrl} />\r\n      <ul id=\"city-ul\">\r\n        {cityUl &&\r\n          cityUl.map((cityItem) => {\r\n            return (\r\n              <li className=\"city-item\" key={cityItem.id}>\r\n                <CityItem\r\n                  cityData={cityItem}\r\n                  setCityUl={setCityUl}\r\n                  cityUl={cityUl}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n      {hasError.status && <p className=\"Err\">OOPS!!! {hasError.message}</p>}\r\n      {isLoading && <p>Loading ...</p>}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1 className=\"hdr\">Weather</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CitySrc from \"./CitySrc\";\nimport Header from \"./Header.js\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <CitySrc />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}