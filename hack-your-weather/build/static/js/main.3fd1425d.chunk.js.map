{"version":3,"sources":["components/CityItem.js","components/Input.js","components/CitySrc.js","components/Header.js","components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["CityItem","cityItem","setCityUl","cityUl","name","sys","weather","main","coord","id","type","onClick","newList","filter","item","handleRemove","to","country","className","description","temp_min","temp_max","lat","lon","Input","changeUrl","useState","cityName","setCityName","onSubmit","e","preventDefault","process","placeholder","onChange","target","value","disabled","length","CitySrc","url","setUrl","isLoading","setLoading","hasError","setError","useEffect","a","fetch","response","console","log","ok","json","data","getCityWeather","map","Header","WeatherChart","match","cityList","setCityList","setCityname","params","cityId","list","city","width","height","margin","top","right","left","bottom","dataKey","stroke","fill","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAqCeA,EAlCE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAC/BC,EAAoCH,EAApCG,KAAMC,EAA8BJ,EAA9BI,IAAKC,EAAyBL,EAAzBK,QAASC,EAAgBN,EAAhBM,KAAMC,EAAUP,EAAVO,MAKlC,OACE,qCACE,wBACEC,GAAG,QACHC,KAAK,SACLC,QAAS,kBATf,SAAsBF,GACpB,IAAMG,EAAUT,EAAOU,QAAO,SAACC,GAAD,OAAUA,EAAKL,KAAOA,KACpDP,EAAUU,GAOSG,CAAad,EAASQ,KAHvC,eAOA,eAAC,IAAD,CAAMO,GAAE,WAAMf,EAASQ,IAAvB,UACG,IACD,+BACGL,EADH,KACWC,EAAIY,cAGjB,sBAAKC,UAAU,eAAf,UACE,6BAAKZ,EAAQ,GAAGC,OAChB,4BAAID,EAAQ,GAAGa,cACf,2CAAcZ,EAAKa,YACnB,2CAAcb,EAAKc,YACnB,2CACab,EAAMc,IADnB,KAC0Bd,EAAMe,cC5BzB,SAASC,EAAT,GAA+B,IAAdC,EAAa,EAAbA,UAAa,EACXC,mBAAS,IADE,mBACpCC,EADoC,KAC1BC,EAD0B,KAG3C,OACE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFN,EAAU,qDAAD,OAC8CE,EAD9C,+BALCK,sCAEd,UAQE,uBACEvB,GAAG,WACHwB,YAAY,0BACZvB,KAAK,OACLwB,SAAU,SAACJ,GACTF,EAAYE,EAAEK,OAAOC,UAGzB,uBACE3B,GAAG,UACH4B,SAAUV,EAASW,OAAS,EAC5BF,MAAM,cACN1B,KAAK,cCtBE,SAAS6B,IAAW,IAAD,EACJb,mBAAS,IADL,mBACzBvB,EADyB,KACjBD,EADiB,OAEVwB,qBAFU,mBAEzBc,EAFyB,KAEpBC,EAFoB,OAGAf,oBAAS,GAHT,mBAGzBgB,EAHyB,KAGdC,EAHc,OAIHjB,oBAAS,GAJN,mBAIzBkB,EAJyB,KAIfC,EAJe,KAmChC,OAzBAC,qBAAU,YACY,uCAAG,8BAAAC,EAAA,0DACjBP,EADiB,wBAEnBG,GAAW,GAFQ,kBAIMK,MAAMR,GAJZ,UAIXS,EAJW,OAKjBC,QAAQC,IAAIF,GACZN,GAAW,IACPM,EAASG,GAPI,wBAQfP,GAAS,GARM,UASII,EAASI,OATb,QASTC,EATS,OAUfpD,EAAU,CAACoD,GAAF,mBAAWnD,KACpB+C,QAAQC,IAAIhD,GAXG,wBAaf0C,GAAS,GAbM,0DAgBjBA,GAAS,GACTF,GAAW,GAjBM,0DAAH,qDAqBpBY,KAEC,CAACf,IAEF,sBAAKtB,UAAU,gBAAf,UACE,cAACM,EAAD,CAAOC,UA/BO,SAACe,GACjBC,EAAOD,MA+BJI,GAAY,oBAAG1B,UAAU,gBAAb,6BAA8C0B,KAC1DF,GAAa,4CACd,oBAAIjC,GAAG,UAAP,SACGN,GACCA,EAAOqD,KAAI,SAACvD,GACV,OACE,oBAAIiB,UAAU,YAAd,SACE,cAAC,EAAD,CACEjB,SAAUA,EACVC,UAAWA,EACXC,OAAQA,KAJmBF,EAASQ,YC9CtD,IAIegD,EAJA,WACb,OAAO,oBAAIvC,UAAU,MAAd,sB,QCQM,SAASwC,EAAT,GAAkC,IAAVC,EAAS,EAATA,MAAS,EACdjC,mBAAS,IADK,mBACvCkC,EADuC,KAC7BC,EAD6B,OAEdnC,qBAFc,mBAEvCC,EAFuC,KAE7BmC,EAF6B,OAGjBpC,oBAAS,GAHQ,mBAGvCkB,EAHuC,KAG7BC,EAH6B,OAIdnB,oBAAS,GAJK,mBAIvCgB,EAJuC,KAI5BC,EAJ4B,KAOxCH,EAAG,8DAA0DmB,EAAMI,OAAOC,OAAvE,+BADOhC,oCA6BhB,OA1BAc,qBAAU,YACY,uCAAG,8BAAAC,EAAA,0DACjBP,EADiB,wBAEnBG,GAAW,GAFQ,kBAIMK,MAAMR,GAJZ,UAIXS,EAJW,OAKjBC,QAAQC,IAAIF,GACZN,GAAW,IACPM,EAASG,GAPI,wBAQfP,GAAS,GARM,UASII,EAASI,OATb,QASTC,EATS,OAUfO,EAAYP,EAAKW,MACjBH,EAAYR,EAAKY,KAAK9D,MAXP,wBAafyC,GAAS,GAbM,0DAgBjBA,GAAS,GACTF,GAAW,GAjBM,0DAAH,qDAqBpBY,KAEC,CAACf,IAGF,sBAAKtB,UAAU,kBAAf,UACE,qDAAwBS,KACvBe,GAAa,4CACbE,GACC,oBAAG1B,UAAU,gBAAb,qCAAsD0B,KAGxD,eAAC,IAAD,CACE1B,UAAU,QACViD,MAAO,IACPC,OAAQ,IACRd,KAAMM,EACNS,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GATZ,UAYE,cAAC,IAAD,IACA,cAAC,IAAD,CAAOC,QAAQ,WACf,cAAC,IAAD,CAAOA,QAAQ,cACf,cAAC,IAAD,IACA,cAAC,IAAD,CACEhE,KAAK,WACLgE,QAAQ,YACRC,OAAO,UACPC,KAAK,eAGT,cAAC,IAAD,CAAM5D,GAAG,IAAT,SACE,wBAAQE,UAAU,OAAlB,uB,WCzDO2D,MAdf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,UACE,cAAC,EAAD,IACA,cAACxC,EAAD,OAEF,cAAC,IAAD,CAAOwC,KAAK,WAAWC,UAAWtB,UCH3BuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3fd1425d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CityItem = ({ cityItem, setCityUl, cityUl }) => {\r\n  const { name, sys, weather, main, coord } = cityItem;\r\n  function handleRemove(id) {\r\n    const newList = cityUl.filter((item) => item.id !== id);\r\n    setCityUl(newList);\r\n  }\r\n  return (\r\n    <>\r\n      <button\r\n        id=\"close\"\r\n        type=\"button\"\r\n        onClick={() => handleRemove(cityItem.id)}\r\n      >\r\n        X\r\n      </button>\r\n      <Link to={`/${cityItem.id}`}>\r\n        {\" \"}\r\n        <h2>\r\n          {name}, {sys.country}\r\n        </h2>\r\n      </Link>\r\n      <div className=\"weather-desc\">\r\n        <h3>{weather[0].main}</h3>\r\n        <p>{weather[0].description}</p>\r\n        <p>min temp: {main.temp_min}</p>\r\n        <p>max temp: {main.temp_max}</p>\r\n        <p>\r\n          location: {coord.lat}, {coord.lon}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityItem;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Input({ changeUrl }) {\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        changeUrl(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${API_KEY}`\r\n        );\r\n      }}\r\n    >\r\n      <input\r\n        id=\"src-text\"\r\n        placeholder=\"Enter a valid city name\"\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          setCityName(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        id=\"src-btn\"\r\n        disabled={cityName.length < 1}\r\n        value=\"Search City\"\r\n        type=\"submit\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CityItem from \"./CityItem\";\r\nimport Input from \"./Input\";\r\n\r\nexport default function CitySrc() {\r\n  const [cityUl, setCityUl] = useState([]);\r\n  const [url, setUrl] = useState();\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [hasError, setError] = useState(false);\r\n\r\n  const changeUrl = (url) => {\r\n    setUrl(url);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCityWeather = async () => {\r\n      if (url) {\r\n        setLoading(true);\r\n        try {\r\n          const response = await fetch(url);\r\n          console.log(response);\r\n          setLoading(false);\r\n          if (response.ok) {\r\n            setError(false);\r\n            const data = await response.json();\r\n            setCityUl([data, ...cityUl]);\r\n            console.log(cityUl);\r\n          } else {\r\n            setError(true);\r\n          }\r\n        } catch (error) {\r\n          setError(true);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n    getCityWeather();\r\n    // eslint-disable-next-line\r\n  }, [url]);\r\n  return (\r\n    <div className=\"src-container\">\r\n      <Input changeUrl={changeUrl} />\r\n      {hasError && <p className=\"error-message\">City not found! {hasError}</p>}\r\n      {isLoading && <p>Loading ...</p>}\r\n      <ul id=\"city-ul\">\r\n        {cityUl &&\r\n          cityUl.map((cityItem) => {\r\n            return (\r\n              <li className=\"city-item\" key={cityItem.id}>\r\n                <CityItem\r\n                  cityItem={cityItem}\r\n                  setCityUl={setCityUl}\r\n                  cityUl={cityUl}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1 className=\"hdr\">Weather</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n} from \"recharts\";\r\n\r\nexport default function WeatherChart({ match }) {\r\n  const [cityList, setCityList] = useState([]);\r\n  const [cityName, setCityname] = useState();\r\n  const [hasError, setError] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\r\n  const url = `https://api.openweathermap.org/data/2.5/forecast?id=${match.params.cityId}&units=metric&appid=${API_KEY}`;\r\n\r\n  useEffect(() => {\r\n    const getCityWeather = async () => {\r\n      if (url) {\r\n        setLoading(true);\r\n        try {\r\n          const response = await fetch(url);\r\n          console.log(response);\r\n          setLoading(false);\r\n          if (response.ok) {\r\n            setError(false);\r\n            const data = await response.json();\r\n            setCityList(data.list);\r\n            setCityname(data.city.name);\r\n          } else {\r\n            setError(true);\r\n          }\r\n        } catch (error) {\r\n          setError(true);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n    getCityWeather();\r\n    // eslint-disable-next-line\r\n  }, [url]);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <h2>5 days forecast in {cityName}</h2>\r\n      {isLoading && <h3>Loading...</h3>}\r\n      {hasError && (\r\n        <p className=\"error-message\">Something went wrong... {hasError}</p>\r\n      )}\r\n\r\n      <AreaChart\r\n        className=\"chart\"\r\n        width={1000}\r\n        height={500}\r\n        data={cityList}\r\n        margin={{\r\n          top: 10,\r\n          right: 30,\r\n          left: 0,\r\n          bottom: 0,\r\n        }}\r\n      >\r\n        <CartesianGrid />\r\n        <XAxis dataKey=\"dt_txt\" />\r\n        <YAxis dataKey=\"main.temp\" />\r\n        <Tooltip />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"main.temp\"\r\n          stroke=\"#990000\"\r\n          fill=\"#ff8000\"\r\n        />\r\n      </AreaChart>\r\n      <Link to=\"/\">\r\n        <button className=\"back\">Back</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport CitySrc from \"./components/CitySrc\";\r\nimport Header from \"./components/Header.js\";\r\nimport WeatherChart from \"./components/Chart\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Header />\r\n          <CitySrc />\r\n        </Route>\r\n        <Route path=\"/:cityId\" component={WeatherChart} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}